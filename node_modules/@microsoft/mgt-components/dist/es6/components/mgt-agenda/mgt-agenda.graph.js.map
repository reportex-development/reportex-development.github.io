{"version":3,"file":"mgt-agenda.graph.js","sourceRoot":"src/","sources":["components/mgt-agenda/mgt-agenda.graph.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,iBAAiB,EAAU,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAG/E;;;;;;;;;GASG;AACH,MAAM,UAAU,qBAAqB,CACnC,KAAa,EACb,aAAmB,EACnB,WAAiB,EACjB,OAAgB,EAChB,iBAA0B;IAE1B,MAAM,MAAM,GAAG,gBAAgB,CAAC;IAEhC,MAAM,GAAG,GAAG,iBAAiB,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC;IAC3D,MAAM,GAAG,GAAG,eAAe,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC;IAEvD,IAAI,GAAW,CAAC;IAEhB,IAAI,OAAO,EAAE;QACX,GAAG,GAAG,UAAU,OAAO,WAAW,CAAC;KACpC;SAAM;QACL,GAAG,GAAG,IAAI,CAAC;KACZ;IAED,GAAG,IAAI,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;IAErC,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAE7F,IAAI,iBAAiB,EAAE;QACrB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,qBAAqB,iBAAiB,GAAG,CAAC,CAAC;KAC/E;IAED,OAAO,iBAAiB,CAAC,MAAM,CAAuB,KAAK,EAAE,OAAO,CAAC,CAAC;AACxE,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphPageIterator, IGraph, prepScopes } from '@microsoft/mgt-element';\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n\n/**\n * returns Calender events iterator associated with either the logged in user or a specific groupId\n *\n * @param {Date} startDateTime\n * @param {Date} endDateTime\n * @param {string} [groupId]\n * @param {string} preferredTimezone\n * @returns {(Promise<Event[]>)}\n * @memberof Graph\n */\nexport function getEventsPageIterator(\n  graph: IGraph,\n  startDateTime: Date,\n  endDateTime: Date,\n  groupId?: string,\n  preferredTimezone?: string\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> {\n  const scopes = 'calendars.read';\n\n  const sdt = `startdatetime=${startDateTime.toISOString()}`;\n  const edt = `enddatetime=${endDateTime.toISOString()}`;\n\n  let uri: string;\n\n  if (groupId) {\n    uri = `groups/${groupId}/calendar`;\n  } else {\n    uri = 'me';\n  }\n\n  uri += `/calendarview?${sdt}&${edt}`;\n\n  let request = graph.api(uri).middlewareOptions(prepScopes(scopes)).orderby('start/dateTime');\n\n  if (preferredTimezone) {\n    request = request.header('Prefer', `outlook.timezone=\"${preferredTimezone}\"`);\n  }\n\n  return GraphPageIterator.create<MicrosoftGraph.Event>(graph, request);\n}\n"]}