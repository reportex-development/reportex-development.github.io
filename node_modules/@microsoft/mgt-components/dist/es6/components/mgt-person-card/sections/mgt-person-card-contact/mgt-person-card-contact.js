/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { customElement, html } from 'lit-element';
import { TeamsHelper } from '@microsoft/mgt-element';
import { classMap } from 'lit-html/directives/class-map';
import { getEmailFromGraphEntity } from '../../../../graph/graph.people';
import { BasePersonCardSection } from '../BasePersonCardSection';
import { styles } from './mgt-person-card-contact-css';
import { getSvg, SvgIcon } from '../../../../utils/SvgHelper';
import { strings } from './strings';
/**
 * The contact details subsection of the person card
 *
 * @export
 * @class MgtPersonCardProfile
 * @extends {MgtTemplatedComponent}
 */
let MgtPersonCardContact = class MgtPersonCardContact extends BasePersonCardSection {
    // tslint:enable: object-literal-sort-keys
    constructor(person) {
        super();
        // tslint:disable: object-literal-sort-keys
        this._contactParts = {
            email: {
                icon: getSvg(SvgIcon.Email, '#929292'),
                onClick: () => this.sendEmail(),
                showCompact: true,
                title: 'Email'
            },
            chat: {
                icon: getSvg(SvgIcon.Chat, '#929292'),
                onClick: () => this.sendChat(),
                showCompact: false,
                title: 'Teams'
            },
            businessPhone: {
                icon: getSvg(SvgIcon.CellPhone, '#929292'),
                onClick: () => this.sendCall(),
                showCompact: true,
                title: 'Business Phone'
            },
            cellPhone: {
                icon: getSvg(SvgIcon.CellPhone, '#929292'),
                onClick: () => this.sendCall(),
                showCompact: true,
                title: 'Mobile Phone'
            },
            department: {
                icon: getSvg(SvgIcon.Department, '#929292'),
                showCompact: false,
                title: 'Department'
            },
            title: {
                icon: getSvg(SvgIcon.Person, '#929292'),
                showCompact: false,
                title: 'Title'
            },
            officeLocation: {
                icon: getSvg(SvgIcon.OfficeLocation, '#929292'),
                showCompact: true,
                title: 'Office Location'
            }
        };
        this._person = person;
        this._contactParts.email.value = getEmailFromGraphEntity(this._person);
        this._contactParts.chat.value = this._person.userPrincipalName;
        this._contactParts.cellPhone.value = this._person.mobilePhone;
        this._contactParts.department.value = this._person.department;
        this._contactParts.title.value = this._person.jobTitle;
        this._contactParts.officeLocation.value = this._person.officeLocation;
        if (this._person.businessPhones && this._person.businessPhones.length) {
            this._contactParts.businessPhone.value = this._person.businessPhones[0];
        }
    }
    /**
     * Array of styles to apply to the element. The styles should be defined
     * using the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    get strings() {
        return strings;
    }
    /**
     * Returns true if the component has data it can render
     *
     * @readonly
     * @abstract
     * @type {boolean}
     * @memberof BasePersonCardSection
     */
    get hasData() {
        if (!this._contactParts) {
            return false;
        }
        const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
        return !!availableParts.length;
    }
    /**
     * The name for display in the overview section.
     *
     * @readonly
     * @type {string}
     * @memberof MgtPersonCardContact
     */
    get displayName() {
        return this.strings.contactSectionTitle;
    }
    // Defines the skeleton for what contact fields are available and what they do.
    /**
     * Render the icon for display in the navigation ribbon.
     *
     * @returns {TemplateResult}
     * @memberof MgtPersonCardContact
     */
    renderIcon() {
        return getSvg(SvgIcon.Contact);
    }
    /**
     * Reset any state in the section
     *
     * @protected
     * @memberof MgtPersonCardContact
     */
    clearState() {
        super.clearState();
        for (const key of Object.keys(this._contactParts)) {
            this._contactParts[key].value = null;
        }
    }
    /**
     * Render the compact view
     *
     * @returns {TemplateResult}
     * @memberof MgtPersonCardContact
     */
    renderCompactView() {
        let contentTemplate;
        if (!this.hasData) {
            return null;
        }
        const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
        // Filter for compact mode parts with values
        let compactParts = Object.values(availableParts).filter((p) => !!p.value && p.showCompact);
        if (!compactParts || !compactParts.length) {
            compactParts = Object.values(availableParts).slice(0, 2);
        }
        contentTemplate = html `
      ${compactParts.map(p => this.renderContactPart(p))}
    `;
        return html `
      <div class="root compact" dir=${this.direction}>
        ${contentTemplate}
      </div>
    `;
    }
    /**
     * Render the full view
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPersonCardContact
     */
    renderFullView() {
        let contentTemplate;
        if (this.hasData) {
            // Filter for parts with values only
            const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
            contentTemplate = html `
        ${availableParts.map(part => this.renderContactPart(part))}
      `;
        }
        return html `
      <div class="root" dir=${this.direction}>
        <div class="title">${this.displayName}</div>
        ${contentTemplate}
      </div>
    `;
    }
    /**
     * Render a specific contact part
     *
     * @protected
     * @param {IContactPart} part
     * @returns {TemplateResult}
     * @memberof MgtPersonCardContact
     */
    renderContactPart(part) {
        let isPhone = false;
        if (part.title === 'Mobile Phone' || part.title === 'Business Phone') {
            isPhone = true;
        }
        const partLinkClasses = {
            part__link: true,
            phone: isPhone
        };
        const valueTemplate = part.onClick
            ? html `
          <span class=${classMap(partLinkClasses)} @click=${(e) => part.onClick(e)}>${part.value}</span>
        `
            : html `
          ${part.value}
        `;
        return html `
      <div class="part" @click=${(e) => this.handlePartClick(e, part.value)}>
        <div class="part__icon">${part.icon}</div>
        <div class="part__details">
          <div class="part__title">${part.title}</div>
          <div class="part__value">${valueTemplate}</div>
        </div>
        <div class="part__copy">
          ${getSvg(SvgIcon.Copy)}
        </div>
      </div>
    `;
    }
    /**
     * Handle the click event for contact parts
     *
     * @protected
     * @memberof MgtPersonCardContact
     */
    handlePartClick(e, value) {
        if (value) {
            navigator.clipboard.writeText(value);
        }
    }
    /**
     * Send a chat message to the user
     *
     * @protected
     * @memberof MgtPersonCardContact
     */
    sendChat() {
        const chat = this._contactParts.chat.value;
        if (!chat) {
            return;
        }
        const url = `https://teams.microsoft.com/l/chat/0/0?users=${chat}`;
        const openWindow = () => window.open(url, '_blank');
        if (TeamsHelper.isAvailable) {
            TeamsHelper.executeDeepLink(url, (status) => {
                if (!status) {
                    openWindow();
                }
            });
        }
        else {
            openWindow();
        }
    }
    /**
     * Send an email to the user
     *
     * @protected
     * @memberof MgtPersonCardContact
     */
    sendEmail() {
        const email = this._contactParts.email.value;
        if (email) {
            window.open('mailto:' + email, '_blank');
        }
    }
    /**
     * Send a call to the user
     *
     * @protected
     * @memberof MgtPersonCardContact
     */
    sendCall() {
        const cellPhone = this._contactParts.cellPhone.value;
        if (cellPhone) {
            window.open('tel:' + cellPhone, '_blank');
        }
    }
};
MgtPersonCardContact = __decorate([
    customElement('mgt-person-card-contact'),
    __metadata("design:paramtypes", [Object])
], MgtPersonCardContact);
export { MgtPersonCardContact };
//# sourceMappingURL=mgt-person-card-contact.js.map