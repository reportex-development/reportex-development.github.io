{"version":3,"file":"graph.userWithPhoto.js","sourceRoot":"src/","sources":["graph/graph.userWithPhoto.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { CacheService, IGraph, prepScopes } from '@microsoft/mgt-element';\n\nimport {\n  CachePhoto,\n  getIsPhotosCacheEnabled,\n  getPhotoForResource,\n  getPhotoFromCache,\n  getPhotoInvalidationTime,\n  storePhotoInCache\n} from './graph.photos';\nimport { CacheUser, getIsUsersCacheEnabled, getUserInvalidationTime } from './graph.user';\nimport { IDynamicPerson } from './types';\nimport { schemas } from './cacheStores';\n\n/**\n * async promise, returns IDynamicPerson\n *\n * @param {string} userId\n * @returns {(Promise<IDynamicPerson>)}\n * @memberof Graph\n */\nexport async function getUserWithPhoto(\n  graph: IGraph,\n  userId?: string,\n  requestedProps?: string[]\n): Promise<IDynamicPerson> {\n  let photo = null;\n  let user: IDynamicPerson = null;\n\n  let cachedPhoto: CachePhoto;\n  let cachedUser: CacheUser;\n\n  const resource = userId ? `users/${userId}` : 'me';\n  let fullResource = resource + (requestedProps ? `?$select=${requestedProps.toString()}` : '');\n\n  const scopes = userId ? ['user.readbasic.all'] : ['user.read'];\n\n  // attempt to get user and photo from cache if enabled\n  if (getIsUsersCacheEnabled()) {\n    const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n    cachedUser = await cache.getValue(userId || 'me');\n    if (cachedUser && getUserInvalidationTime() > Date.now() - cachedUser.timeCached) {\n      user = cachedUser.user ? JSON.parse(cachedUser.user) : null;\n      if (requestedProps) {\n        const uniqueProps = requestedProps.filter(prop => !Object.keys(user).includes(prop));\n        if (uniqueProps.length >= 1) {\n          user = null;\n          cachedUser = null;\n        }\n      }\n    } else {\n      cachedUser = null;\n    }\n  }\n  if (getIsPhotosCacheEnabled()) {\n    cachedPhoto = await getPhotoFromCache(userId || 'me', schemas.photos.stores.users);\n    if (cachedPhoto && getPhotoInvalidationTime() > Date.now() - cachedPhoto.timeCached) {\n      photo = cachedPhoto.photo;\n    } else if (cachedPhoto) {\n      try {\n        const response = await graph.api(`${resource}/photo`).get();\n        if (response && response['@odata.mediaEtag'] && response['@odata.mediaEtag'] === cachedPhoto.eTag) {\n          // put current image into the cache to update the timestamp since etag is the same\n          storePhotoInCache(userId || 'me', schemas.photos.stores.users, cachedPhoto);\n          photo = cachedPhoto.photo;\n        } else {\n          cachedPhoto = null;\n        }\n      } catch (e) {}\n    }\n  }\n\n  // if both are not in the cache, batch get them\n  if (!cachedPhoto && !cachedUser) {\n    let eTag: string;\n\n    // batch calls\n    const batch = graph.createBatch();\n    if (userId) {\n      batch.get('user', `/users/${userId}${requestedProps ? '?$select=' + requestedProps.toString() : ''}`, [\n        'user.readbasic.all'\n      ]);\n      batch.get('photo', `users/${userId}/photo/$value`, ['user.readbasic.all']);\n    } else {\n      batch.get('user', 'me', ['user.read']);\n      batch.get('photo', 'me/photo/$value', ['user.read']);\n    }\n    const response = await batch.executeAll();\n\n    const photoResponse = response.get('photo');\n    if (photoResponse) {\n      eTag = photoResponse.headers['ETag'];\n      photo = photoResponse.content;\n    }\n\n    const userResponse = response.get('user');\n    if (userResponse) {\n      user = userResponse.content;\n    }\n\n    // store user & photo in their respective cache\n    if (getIsUsersCacheEnabled()) {\n      const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n      cache.putValue(userId || 'me', { user: JSON.stringify(user) });\n    }\n    if (getIsPhotosCacheEnabled()) {\n      storePhotoInCache(userId || 'me', schemas.photos.stores.users, { eTag, photo: photo });\n    }\n  } else if (!cachedPhoto) {\n    // if only photo or user is not cached, get it individually\n    const response = await getPhotoForResource(graph, resource, scopes);\n    if (response) {\n      if (getIsPhotosCacheEnabled()) {\n        storePhotoInCache(userId || 'me', schemas.photos.stores.users, { eTag: response.eTag, photo: response.photo });\n      }\n      photo = response.photo;\n    }\n  } else if (!cachedUser) {\n    // get user from graph\n    const response = await graph\n      .api(fullResource)\n      .middlewareOptions(prepScopes(...scopes))\n      .get();\n\n    if (response) {\n      if (getIsUsersCacheEnabled()) {\n        const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n        cache.putValue(userId || 'me', { user: JSON.stringify(response) });\n      }\n      user = response;\n    }\n  }\n\n  if (user) {\n    user.personImage = photo;\n  }\n  return user;\n}\n"]}