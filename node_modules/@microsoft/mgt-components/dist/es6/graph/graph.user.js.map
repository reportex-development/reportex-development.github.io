{"version":3,"file":"graph.user.js","sourceRoot":"src/","sources":["graph/graph.user.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes, CacheItem, CacheService, CacheStore } from '@microsoft/mgt-element';\nimport { User } from '@microsoft/microsoft-graph-types';\n\nimport { findPeople, PersonType } from './graph.people';\nimport { schemas } from './cacheStores';\n\n/**\n * Object to be stored in cache\n */\nexport interface CacheUser extends CacheItem {\n  /**\n   * stringified json representing a user\n   */\n  user?: string;\n}\n\n/**\n * Object to be stored in cache\n */\nexport interface CacheUserQuery extends CacheItem {\n  /**\n   * max number of results the query asks for\n   */\n  maxResults?: number;\n  /**\n   * list of users returned by query\n   */\n  results?: string[];\n}\n\n/**\n * Defines the time it takes for objects in the cache to expire\n */\nexport const getUserInvalidationTime = (): number =>\n  CacheService.config.users.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether or not the cache is enabled\n */\nexport const getIsUsersCacheEnabled = (): boolean =>\n  CacheService.config.users.isEnabled && CacheService.config.isEnabled;\n\n/**\n * async promise, returns Graph User data relating to the user logged in\n *\n * @returns {(Promise<User>)}\n * @memberof Graph\n */\nexport async function getMe(graph: IGraph, requestedProps?: string[]): Promise<User> {\n  let cache: CacheStore<CacheUser>;\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n    const me = await cache.getValue('me');\n\n    if (me && getUserInvalidationTime() > Date.now() - me.timeCached) {\n      const cachedData = JSON.parse(me.user);\n      const uniqueProps = requestedProps\n        ? requestedProps.filter(prop => !Object.keys(cachedData).includes(prop))\n        : null;\n\n      // if requestedProps doesn't contain any unique props other than \"@odata.context\"\n      if (!uniqueProps || uniqueProps.length <= 1) {\n        return cachedData;\n      }\n    }\n  }\n\n  let apiString = 'me';\n  if (requestedProps) {\n    apiString = apiString + '?$select=' + requestedProps.toString();\n  }\n  const response = graph.api(apiString).middlewareOptions(prepScopes('user.read')).get();\n  if (getIsUsersCacheEnabled()) {\n    cache.putValue('me', { user: JSON.stringify(await response) });\n  }\n  return response;\n}\n\n/**\n * async promise, returns all Graph users associated with the userPrincipleName provided\n *\n * @param {string} userPrincipleName\n * @returns {(Promise<User>)}\n * @memberof Graph\n */\nexport async function getUser(graph: IGraph, userPrincipleName: string, requestedProps?: string[]): Promise<User> {\n  const scopes = 'user.readbasic.all';\n  let cache: CacheStore<CacheUser>;\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n    // check cache\n    const user = await cache.getValue(userPrincipleName);\n\n    // is it stored and is timestamp good?\n    if (user && getUserInvalidationTime() > Date.now() - user.timeCached) {\n      const cachedData = user.user ? JSON.parse(user.user) : null;\n      const uniqueProps =\n        requestedProps && cachedData ? requestedProps.filter(prop => !Object.keys(cachedData).includes(prop)) : null;\n\n      // return without any worries\n      if (!uniqueProps || uniqueProps.length <= 1) {\n        return cachedData;\n      }\n    }\n  }\n\n  let apiString = `/users/${userPrincipleName}`;\n  if (requestedProps) {\n    apiString = apiString + '?$select=' + requestedProps.toString();\n  }\n\n  // else we must grab it\n  const response = await graph.api(apiString).middlewareOptions(prepScopes(scopes)).get();\n  if (getIsUsersCacheEnabled()) {\n    cache.putValue(userPrincipleName, { user: JSON.stringify(response) });\n  }\n  return response;\n}\n\n/**\n * Returns a Promise of Graph Users array associated with the user ids array\n *\n * @export\n * @param {IGraph} graph\n * @param {string[]} userIds, an array of string ids\n * @returns {Promise<User[]>}\n */\nexport async function getUsersForUserIds(graph: IGraph, userIds: string[]): Promise<User[]> {\n  if (!userIds || userIds.length === 0) {\n    return [];\n  }\n  const batch = graph.createBatch();\n  const peopleDict = {};\n  const notInCache = [];\n  let cache: CacheStore<CacheUser>;\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n  }\n\n  for (const id of userIds) {\n    peopleDict[id] = null;\n    let user = null;\n    if (getIsUsersCacheEnabled()) {\n      user = await cache.getValue(id);\n    }\n    if (user && getUserInvalidationTime() > Date.now() - user.timeCached) {\n      peopleDict[id] = user.user ? JSON.parse(user.user) : null;\n    } else if (id !== '') {\n      batch.get(id, `/users/${id}`, ['user.readbasic.all']);\n      notInCache.push(id);\n    }\n  }\n  try {\n    const responses = await batch.executeAll();\n    // iterate over userIds to ensure the order of ids\n    for (const id of userIds) {\n      const response = responses.get(id);\n      if (response && response.content) {\n        peopleDict[id] = response.content;\n        if (getIsUsersCacheEnabled()) {\n          cache.putValue(id, { user: JSON.stringify(response.content) });\n        }\n      }\n    }\n    return Promise.all(Object.values(peopleDict));\n  } catch (_) {\n    // fallback to making the request one by one\n    try {\n      // call getUser for all the users that weren't cached\n      userIds.filter(id => notInCache.includes(id)).forEach(id => (peopleDict[id] = getUser(graph, id)));\n      if (getIsUsersCacheEnabled()) {\n        // store all users that weren't retrieved from the cache, into the cache\n        userIds\n          .filter(id => notInCache.includes(id))\n          .forEach(async id => cache.putValue(id, { user: JSON.stringify(await peopleDict[id]) }));\n      }\n      return Promise.all(Object.values(peopleDict));\n    } catch (_) {\n      return [];\n    }\n  }\n}\n\n/**\n * Returns a Promise of Graph Users array associated with the people queries array\n *\n * @export\n * @param {IGraph} graph\n * @param {string[]} peopleQueries, an array of string ids\n * @returns {Promise<User[]>}\n */\nexport async function getUsersForPeopleQueries(graph: IGraph, peopleQueries: string[]): Promise<User[]> {\n  if (!peopleQueries || peopleQueries.length === 0) {\n    return [];\n  }\n\n  const batch = graph.createBatch();\n  const people = [];\n  let cacheRes: CacheUserQuery;\n  let cache: CacheStore<CacheUserQuery>;\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUserQuery>(schemas.users, schemas.users.stores.usersQuery);\n  }\n\n  for (const personQuery of peopleQueries) {\n    if (getIsUsersCacheEnabled()) {\n      cacheRes = await cache.getValue(personQuery);\n    }\n\n    if (getIsUsersCacheEnabled() && cacheRes && getUserInvalidationTime() > Date.now() - cacheRes.timeCached) {\n      people.push(JSON.parse(cacheRes.results[0]));\n    } else if (personQuery !== '') {\n      batch.get(personQuery, `/me/people?$search=\"${personQuery}\"`, ['people.read']);\n    }\n  }\n\n  try {\n    const responses = await batch.executeAll();\n\n    for (const personQuery of peopleQueries) {\n      const response = responses.get(personQuery);\n      if (response && response.content && response.content.value && response.content.value.length > 0) {\n        people.push(response.content.value[0]);\n        if (getIsUsersCacheEnabled()) {\n          cache.putValue(personQuery, { maxResults: 1, results: [JSON.stringify(response.content.value[0])] });\n        }\n      }\n    }\n\n    return people;\n  } catch (_) {\n    try {\n      return Promise.all(\n        peopleQueries\n          .filter(personQuery => personQuery && personQuery !== '')\n          .map(async personQuery => {\n            const personArray = await findPeople(graph, personQuery, 1);\n            if (personArray && personArray.length) {\n              if (getIsUsersCacheEnabled()) {\n                cache.putValue(personQuery, { maxResults: 1, results: [JSON.stringify(personArray[0])] });\n              }\n              return personArray[0];\n            }\n          })\n      );\n    } catch (_) {\n      return [];\n    }\n  }\n}\n\n/**\n * Search Microsoft Graph for Users in the organization\n *\n * @export\n * @param {IGraph} graph\n * @param {string} query - the string to search for\n * @param {number} [top=10] - maximum number of results to return\n * @returns {Promise<User[]>}\n */\nexport async function findUsers(graph: IGraph, query: string, top: number = 10): Promise<User[]> {\n  const scopes = 'User.ReadBasic.All';\n  const item = { maxResults: top, results: null };\n  let cache: CacheStore<CacheUserQuery>;\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUserQuery>(schemas.users, schemas.users.stores.usersQuery);\n    const result: CacheUserQuery = await cache.getValue(query);\n\n    if (result && getUserInvalidationTime() > Date.now() - result.timeCached) {\n      return result.results.map(userStr => JSON.parse(userStr));\n    }\n  }\n\n  let graphResult;\n\n  try {\n    graphResult = await graph\n      .api('users')\n      .header('ConsistencyLevel', 'eventual')\n      .count(true)\n      .search(`\"displayName:${query}\" OR \"mail:${query}\"`)\n      .top(top)\n      .middlewareOptions(prepScopes(scopes))\n      .get();\n  } catch {}\n\n  if (getIsUsersCacheEnabled() && graphResult) {\n    item.results = graphResult.value.map(userStr => JSON.stringify(userStr));\n    cache.putValue(query, item);\n  }\n  return graphResult ? graphResult.value : null;\n}\n\n/**\n * async promise, returns all matching Graph users who are member of the specified group\n *\n * @param {string} query\n * @param {string} groupId - the group to query\n * @param {number} [top=10] - number of people to return\n * @param {PersonType} [personType=PersonType.person] - the type of person to search for\n * @param {boolean} [transitive=false] - whether the return should contain a flat list of all nested members\n * @returns {(Promise<User[]>)}\n */\nexport async function findGroupMembers(\n  graph: IGraph,\n  query: string,\n  groupId: string,\n  top: number = 10,\n  personType: PersonType = PersonType.person,\n  transitive: boolean = false\n): Promise<User[]> {\n  const scopes = ['user.read.all', 'people.read'];\n  const item = { maxResults: top, results: null };\n\n  let cache: CacheStore<CacheUserQuery>;\n  const key = `${groupId || '*'}:${query || '*'}:${personType}:${transitive}`;\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUserQuery>(schemas.users, schemas.users.stores.usersQuery);\n    const result: CacheUserQuery = await cache.getValue(key);\n\n    if (result && getUserInvalidationTime() > Date.now() - result.timeCached) {\n      return result.results.map(userStr => JSON.parse(userStr));\n    }\n  }\n\n  let filter: string = '';\n  if (query) {\n    filter = `startswith(displayName,'${query}') or startswith(givenName,'${query}') or startswith(surname,'${query}') or startswith(mail,'${query}') or startswith(userPrincipalName,'${query}')`;\n  }\n\n  let apiUrl: string = `/groups/${groupId}/${transitive ? 'transitiveMembers' : 'members'}`;\n  if (personType === PersonType.person) {\n    apiUrl += `/microsoft.graph.user`;\n  } else if (personType === PersonType.group) {\n    apiUrl += `/microsoft.graph.group`;\n    if (query) {\n      filter = `startswith(displayName,'${query}') or startswith(mail,'${query}')`;\n    }\n  }\n\n  const graphResult = await graph\n    .api(apiUrl)\n    .count(true)\n    .top(top)\n    .filter(filter)\n    .header('ConsistencyLevel', 'eventual')\n    .middlewareOptions(prepScopes(...scopes))\n    .get();\n\n  if (getIsUsersCacheEnabled() && graphResult) {\n    item.results = graphResult.value.map(userStr => JSON.stringify(userStr));\n    cache.putValue(key, item);\n  }\n\n  return graphResult ? graphResult.value : null;\n}\n"]}