{"version":3,"file":"MockGraph.js","sourceRoot":"src/","sources":["mock/MockGraph.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EACL,qBAAqB,EACrB,MAAM,EAEN,kBAAkB,EAElB,YAAY,EACZ,mBAAmB,EACnB,gBAAgB,EACjB,MAAM,mCAAmC,CAAC;AAE3C,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAGxD;;GAEG;AACH,MAAM,QAAQ,GAAG,sDAAsD,CAAC;AAExE;;GAEG;AACH,MAAM,cAAc,GAAG,8BAA8B,CAAC;AAEtD;;;;;;GAMG;AACH,iDAAiD;AACjD,MAAM,OAAO,SAAU,SAAQ,KAAK;IAClC,YAAY,YAA0B;QACpC,MAAM,UAAU,GAAiB;YAC/B,IAAI,qBAAqB,CAAC,YAAY,CAAC;YACvC,IAAI,YAAY,CAAC,IAAI,mBAAmB,EAAE,CAAC;YAC3C,IAAI,gBAAgB,EAAE;YACtB,IAAI,cAAc,EAAE;YACpB,IAAI,kBAAkB,EAAE;SACzB,CAAC;QAEF,KAAK,CACH,MAAM,CAAC,kBAAkB,CAAC;YACxB,OAAO,EAAE,QAAQ,GAAG,cAAc;YAClC,UAAU,EAAE,eAAe,CAAC,GAAG,UAAU,CAAC;SAC3C,CAAC,CACH,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,YAAY,CAAC,SAA2B;QAC7C,mGAAmG;QACnG,uGAAuG;QACvG,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAED;;;;;;GAMG;AACH,iDAAiD;AACjD,MAAM,cAAc;IAOlB,2CAA2C;IAC9B,OAAO,CAAC,OAAgB;;YACnC,IAAI;gBACF,MAAM,GAAG,GAAG,OAAO,CAAC,OAAiB,CAAC;gBACtC,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;gBACnC,OAAO,CAAC,OAAO,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;aACpF;YAAC,OAAO,KAAK,EAAE;gBACd,eAAe;aAChB;YACD,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;KAAA;IACD;;;;;OAKG;IACI,OAAO,CAAC,IAAgB;QAC7B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport {\n  AuthenticationHandler,\n  Client,\n  Context,\n  HTTPMessageHandler,\n  Middleware,\n  RetryHandler,\n  RetryHandlerOptions,\n  TelemetryHandler\n} from '@microsoft/microsoft-graph-client';\nimport { MgtBaseComponent } from '../components/baseComponent';\nimport { Graph } from '../Graph';\nimport { chainMiddleware } from '../utils/GraphHelpers';\nimport { MockProvider } from './MockProvider';\n\n/**\n * The base URL for the mock endpoint\n */\nconst BASE_URL = 'https://proxy.apisandbox.msdn.microsoft.com/svc?url=';\n\n/**\n * The base URL for the graph\n */\nconst ROOT_GRAPH_URL = 'https://graph.microsoft.com/';\n\n/**\n * MockGraph Instance\n *\n * @export\n * @class MockGraph\n * @extends {Graph}\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class MockGraph extends Graph {\n  constructor(mockProvider: MockProvider) {\n    const middleware: Middleware[] = [\n      new AuthenticationHandler(mockProvider),\n      new RetryHandler(new RetryHandlerOptions()),\n      new TelemetryHandler(),\n      new MockMiddleware(),\n      new HTTPMessageHandler()\n    ];\n\n    super(\n      Client.initWithMiddleware({\n        baseUrl: BASE_URL + ROOT_GRAPH_URL,\n        middleware: chainMiddleware(...middleware)\n      })\n    );\n  }\n\n  /**\n   * Returns an instance of the Graph in the context of the provided component.\n   *\n   * @param {MgtBaseComponent} component\n   * @returns\n   * @memberof Graph\n   */\n  public forComponent(component: MgtBaseComponent): MockGraph {\n    // The purpose of the forComponent pattern is to update the headers of any outgoing Graph requests.\n    // The MockGraph isn't making real Graph requests, so we can simply no-op and return the same instance.\n    return this;\n  }\n}\n\n/**\n * Implements Middleware for the Mock Client to escape\n * the graph url from the request\n *\n * @class MockMiddleware\n * @implements {Middleware}\n */\n// tslint:disable-next-line: max-classes-per-file\nclass MockMiddleware implements Middleware {\n  /**\n   * @private\n   * A member to hold next middleware in the middleware chain\n   */\n  private _nextMiddleware: Middleware;\n\n  // tslint:disable-next-line: completed-docs\n  public async execute(context: Context): Promise<void> {\n    try {\n      const url = context.request as string;\n      const baseLength = BASE_URL.length;\n      context.request = url.substring(0, baseLength) + escape(url.substring(baseLength));\n    } catch (error) {\n      // ignore error\n    }\n    return await this._nextMiddleware.execute(context);\n  }\n  /**\n   * Handles setting of next middleware\n   *\n   * @param {Middleware} next\n   * @memberof SdkVersionMiddleware\n   */\n  public setNext(next: Middleware): void {\n    this._nextMiddleware = next;\n  }\n}\n"]}