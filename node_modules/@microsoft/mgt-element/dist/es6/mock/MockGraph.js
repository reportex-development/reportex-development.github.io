/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AuthenticationHandler, Client, HTTPMessageHandler, RetryHandler, RetryHandlerOptions, TelemetryHandler } from '@microsoft/microsoft-graph-client';
import { Graph } from '../Graph';
import { chainMiddleware } from '../utils/GraphHelpers';
/**
 * The base URL for the mock endpoint
 */
const BASE_URL = 'https://proxy.apisandbox.msdn.microsoft.com/svc?url=';
/**
 * The base URL for the graph
 */
const ROOT_GRAPH_URL = 'https://graph.microsoft.com/';
/**
 * MockGraph Instance
 *
 * @export
 * @class MockGraph
 * @extends {Graph}
 */
// tslint:disable-next-line: max-classes-per-file
export class MockGraph extends Graph {
    constructor(mockProvider) {
        const middleware = [
            new AuthenticationHandler(mockProvider),
            new RetryHandler(new RetryHandlerOptions()),
            new TelemetryHandler(),
            new MockMiddleware(),
            new HTTPMessageHandler()
        ];
        super(Client.initWithMiddleware({
            baseUrl: BASE_URL + ROOT_GRAPH_URL,
            middleware: chainMiddleware(...middleware)
        }));
    }
    /**
     * Returns an instance of the Graph in the context of the provided component.
     *
     * @param {MgtBaseComponent} component
     * @returns
     * @memberof Graph
     */
    forComponent(component) {
        // The purpose of the forComponent pattern is to update the headers of any outgoing Graph requests.
        // The MockGraph isn't making real Graph requests, so we can simply no-op and return the same instance.
        return this;
    }
}
/**
 * Implements Middleware for the Mock Client to escape
 * the graph url from the request
 *
 * @class MockMiddleware
 * @implements {Middleware}
 */
// tslint:disable-next-line: max-classes-per-file
class MockMiddleware {
    // tslint:disable-next-line: completed-docs
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const url = context.request;
                const baseLength = BASE_URL.length;
                context.request = url.substring(0, baseLength) + escape(url.substring(baseLength));
            }
            catch (error) {
                // ignore error
            }
            return yield this._nextMiddleware.execute(context);
        });
    }
    /**
     * Handles setting of next middleware
     *
     * @param {Middleware} next
     * @memberof SdkVersionMiddleware
     */
    setNext(next) {
        this._nextMiddleware = next;
    }
}
//# sourceMappingURL=MockGraph.js.map